{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","Error","PersonForm","props","onSubmit","handleClick","onChange","handleText","value","newName","handleNumber","newNumber","type","Persons","personsToShow","handleDelete","map","person","name","number","onClick","Filter","handleFilter","filterText","App","useState","persons","setPersons","setNewName","setNewNumber","setFilterText","notification","setNotification","errorNotification","setErrorNotification","filter","toLowerCase","includes","useEffect","console","log","personService","initialPersons","event","target","preventDefault","window","confirm","find","p","changedPerson","returnedPerson","setTimeout","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93233935.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove\n}\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n    console.log(\"Here\")\n  }\n\n  return (\n    <div className='success'>\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.handleClick}>\n      <div>\n        name: <input onChange={props.handleText} value={props.newName} />\n      </div>\n      <div>number: <input onChange={props.handleNumber} value={props.newNumber} /></div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({personsToShow, handleDelete}) => {\n  return (\n    <ul>\n      {personsToShow.map(person =>\n        <div>\n          <li key={person.id}>{person.name} {person.number}<button onClick={() => handleDelete(person.id)}>Delete</button></li>\n        </div>\n      )}\n    </ul>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <div>Show names containing: <input onChange={props.handleFilter} value={props.filterText} /></div>\n  )\n}\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterText, setFilterText ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ errorNotification, setErrorNotification ] = useState(null)\n\n  const handleFilter = (event) => {\n    setFilterText(event.target.value)\n  }\n\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(filterText.toLowerCase()))\n\n  const handleText = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleClick = (event) => {\n    event.preventDefault()\n\n    if (persons.map(person => person.name).includes(newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, change number?`)) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = { ...person, number: newNumber }\n\n        personService\n          .update(person.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(p => p.id !== person.id ? p : returnedPerson))\n            })\n          .then(() => {\n            setNotification(\n                `${person.name} was successfully updated`\n              )\n              setTimeout(() => {\n                setNotification(null)\n              }, 5000)\n          })\n          .catch((error) => {\n            setErrorNotification(\n                `${person.name} was already deleted.`\n              )\n              setTimeout(() => {\n                setErrorNotification(null)\n              }, 5000)\n            })\n      }\n    }\n    else {\n      const person = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(person)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n        .then(() => {\n          setNotification(\n            `${person.name} was successfully added`\n          )\n          setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n        })\n        .catch(error => {\n        // this is the way to access the error message\n          console.log(error.response.data)\n          setErrorNotification(\n            `${error.response.data.error}`\n          )\n          setTimeout(() => {\n            setErrorNotification(null)\n          }, 5000)\n        })\n      }\n  }\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleDelete = (id) => {\n    console.log(persons)\n    if (window.confirm(`do you really want to delete ${persons.find(p => p.id === id).name}?`)) {\n      personService\n        .remove(id)\n        .then(setPersons(persons.filter(p => p.id !== id)))\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={notification} />\n      <Error message={errorNotification} />\n      <Filter handleFilter={handleFilter} filterText={filterText} />\n\n      <h3>Add a new person</h3>\n      <PersonForm handleText={handleText} handleClick={handleClick} handleNumber={handleNumber} newName={newName} newNumber={newNumber}/>\n\n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} handleDelete={handleDelete} />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}